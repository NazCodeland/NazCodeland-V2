---
title: Constructor Design Pattern
created: June 30th, 2024
updated: July 21st, 2024
description:
  The Constructor Design Pattern is a creational design pattern and it is automatically invoked every 
  time we instantiate a new instance of a class using the new operator. This method is responsible 
  for initializing the state of the newly created instance by assigning its initial properties and 
  methods. If the class is a subclass, meaning it inherits from a superclass, the constructor invokes 
  the superclass's constructor to ensure newly created instances are assigned the properties and methods 
  of the superclass.
tags: ['javascript']
categories: ['design patterns', 'oop']
---

<script lang="ts">
	import Link from '$lib/elements/Link.svelte';
</script>

<section>

  ## Explanation

	The Constructor Design Pattern is a creational design pattern and it is automatically invoked every 
  time we instantiate a new instance of a class using the **new** operator. This method is responsible 
  for initializing the state of the newly created instance by assigning its _initial_ properties and 
  methods. If the class is a subclass, meaning it inherits from a superclass, the constructor invokes 
  the superclass's constructor to ensure newly created instances are assigned the properties and methods 
  of the superclass.

</section>

<section>
	<Link href="https://en.wikipedia.org/wiki/Constructor_(object-oriented_programming)" linkText="Wikipedia article" block={true} /> says:

		> In class-based, object-oriented programming, a constructor (abbreviation: ctor) is a special type of
		function called to create an object. It prepares the new object for use, often accepting arguments that
		the constructor uses to set required member variables.

</section>


<section>

  ## Analogy

	We can think of a bicycle factory as an analogy for the constructor design pattern. A bicycle factory 
  probably uses a blueprint to ensure all bicycles have the same components, such as tires, chains, and 
  a gear shifting mechanism. This is similar to how a constructor method assigns initial properties and 
  methods to new instances. Just as the factory may produce some parts in-house and purchase others, a 
  subclass might initialize some properties and methods and invoke the superclass's constructor for 
  inheriting properties and methods.

</section>


<section>

  ## Code Example

  <p class="bg-primaryColor/15 text-canvas px-2 py-1 rounded-md">ES6 Syntax</p>

  
  ```js
    class Bicycle { 	// [!code focus:1]
      // Class fields are instance specific properties or methods
      model = 'regular bike';
      chain = 'standard chain';
      year = 2024;
      tires = 2;
  
      constructor(color, size) { 		// [!code focus:10]
        // Properties defined in the constructor are instance specific
        this.color = color;
        this.size = size;  
        // See 'Wrapping Up' for more on defining methods in the constructor
        this.someMethod = function () {
          // Do something
        };
      }

      honk() {
        console.log('honk');
      }   
      gearShiftingMechanism() {
      	// Regular bike implementation
      }
    }

    // Instantiate a new instance of Bicycle class 	// [!code focus:2]
    const bicycle = new Bicycle('blue', 'large');
  ```

  <br/>

	`MountainBike` is a subclass of `Bicycle` and therefore it needs to invoke the 
	constructor of its superclass by using the `super` keyword and passing in the 
	required arguments.


  ```js
    class MountainBike extends Bicycle { 	// [!code focus:1]
      model = 'mountain bike';
      chain = 'advanced chain';
      terrainTypes = ['trail', 'downhill', 'cross-country'];

      constructor(color, size, terrainType) { 		
        // super needs to be invoked before using `this` keyword
        super(color, size);      // [!code focus:1]
        if (!this.terrainTypes.includes(terrainType)) {
          throw new Error('Invalid terrain type');
        } else {
          this.terrainType = terrainType;
        }
      } 			

      // Override the method defined in the superclass by
      // Adding a specific implementation for mountain bikes
      gearShiftingMechanism() {
     	  // Mountain bike implementation
      }
    } // [!code focus:1]

    // Instantiate a new instance of Bicycle class
    const mountainBike = new MountainBike('black', 'medium', 'trail'); 	// [!code focus:1]
  ```

</section>

<section>

  ## Constructors Before ES6

  Prior to ES6, the class syntax that we used above did not exist. The keywords `class`, `extends`, `super`, and the `constructor`
  method were not a thing. Instead, constructor functions, which by convention should start with a capital
  letter, were used to create objects (instances), and  the inheritance chain was setup by assigning the prototype of
  the constructor function to an object created from the prototype of another constructor function. This allowed failed lookup
  calls on instance methods or properties to be delegated to the prototype of the parent constructor function. To share methods
  between all instances of a constructor function, the method had to be defined on the prototype of the constructor function.
  Here is an example of the Bicycle and MountainBike classes using constructor functions:

  <br>

  <p class="bg-primaryColor/15 text-canvas px-2 py-1 rounded-md">ES5 Syntax</p>

  ```js
    function Bicycle(color, size){ 	// [!code focus:10]
      // Equivalent to instance specific properties
      this.modal = 'regular bike';
      this.chain = 'standard chain';
      this.year = 2024;
      this.tires = 2;
      this.color = color;
      this.size = size;
    }

    Bicycle.prototype.honk = function(){
      console.log('honk');
    }

    Bicycle.prototype.gearShiftingMechanism = function(){}

    var bicycle = new Bicycle('blue', 'large');
  ```

  
  ```js
    function MountainBike(color, size, terrainType){ // [!code focus:8]
      this.model = 'mountain bike';
      this.chain = 'advanced chain';
      this.terrainTypes = ['trail', 'downhill', 'cross-country'];
    
      // Equivalent to super(color, size);
      Bicycle.call(this, color, size)
    }

    // Setup the inheritance chain
    MountainBike.prototype = Object.create(Bicycle.prototype);
  
    // Reset the constructor property
    // Resetting the constructor is important for correctly 
    // identifying the constructor of an instance and for other reasons.
    MountainBike.prototype.constructor = MountainBike
  
    // Steps for defining methods on the prototype of MountainBike:
    // 1. Assign the prototype of MountainBike to a new object created
    //  from the Bicycle.prototype object.
    // 2. Reset the constructor property to point back to MountainBike.
    // 3. Define methods on the prototype of MountainBike.
    // Otherwise the methods/properties will be lost.
    MountainBike.prototype.gearShiftingMechanism = function(){
      // This method will override the method inherited from
      // the Bicycle prototype
    }

    var mountainBike = new MountainBike('black', 'medium', 'trail'); 	
  ```

  <br>

  ### ES5 Syntax limitation

  The ES5 syntax has an important limitation, which is that there is no equivalent to private class fields. The `#` symbol in ES6 is used to 
  define private class fields, which are instance-specific properties or methods. These class fields can only be accessed from within the class
  where they're defined; otherwise, an error will be thrown if they are accessed from outside the class. 

  The solution to achieve data privacy in a constructor function using ES5 syntax leads to another problem. We can make the property private by 
  defining it using a `const` or `let` instead of on the `this` keyword. However, this leads to the problem where methods defined 
  on the prototype of the instance won't be able to access that property. It's easier to show this limitation with a code example:

  <br>

  <p class="bg-primaryColor/15 text-canvas px-2 py-1 rounded-md">ES6 Syntax</p>

  ```js
    class Bicycle {
      #serialNumber = 123; 	// [!code focus:1]
      constructor(color, size) {
        this.color = color;
        this.size = size;
      }

      logSerialNumber() { console.log(this.#serialNumber); } // [!code focus:1]
    }

    const bicycle = new Bicycle('blue', 'large'); // [!code focus:3]
    console.log(bicycle.#serialNumber); // output: SyntaxError // 
    bicycle.logSerialNumber(); // output: 123 // 
  ```

  <br>

  Everything works as expected; the private class field `#serialNumber` is not accessible from outside the class, but the method `logSerialNumber`
  is able to access the private class field.

  <br>
  <br>

  <p class="bg-primaryColor/15 text-canvas px-2 py-1 rounded-md">ES5 Syntax</p>

  ```js
    function Bicycle(color, size) {
      const serialNumber = 123; 	// [!code focus:1]
      this.color = color;
      this.size = size;
    }

    Bicycle.prototype.logSerialNumber = function () { // [!code focus:3]
      // will throw 'ReferenceError: serialNumber is not defined'
      console.log(serialNumber);
    };

    var bicycle = new Bicycle('blue', 'large'); // [!code focus:3]
    console.log(bicycle.serialNumber); // output: undefined
    bicycle.logSerialNumber(); // output: the above error
  ```

  <br>

  So, since we want to keep `serialNumber` private, we'll have to define it using `const` or `let` instead of on the `this` keyword 
  because the 'this' keyword represents the instance returned by the constructor function, and therefore, if it were on the instance, 
  it can be accessed by doing `this.serialNumber` and so it wouldn't be private. However, because it's **not** defined on 'this', methods
  defined on the prototype of the instance won't be able to access 'serialNumber' as it is defined within the constructor function's
  **scope** and not on the instance itself.

  However, methods and functions defined within the constructor functions `scope` can access 'serialNumber' because 
  of <Link href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures" linkText="closures" />.


  <br>

  ```js
    function Bicycle(color, size) {
      const serialNumber = 123;
      this.color = color;
      this.size = size;
      this.logSerialNumber = function () { log(); };
      function log() { console.log(serialNumber); }
    }

    var bicycle = new Bicycle('blue', 'large');

    console.log(bicycle.serialNumber); // output: undefined
    bicycle.logSerialNumber(); // output: 123
  ```

  <br>

  So, this leads to the realization that there is a trade-off to be made between `memory efficiency` and `data privacy`.
  
  - If the objective is to minimize memory usage, then we should define methods on the prototype of the constructor function,
  as those methods are shared between all instances but in turn incur the loss of data privacy.

  - If the objective is to have properties or methods that are private, then we should define methods and functions within the
  constructor function scope and, in turn, incur the loss of using more memory.
  
</section>


<section>

	## Wrapping Up

	Some sources do not view the constructor as a design pattern but rather as a method of a class for initializing properties and
  methods of a new instance. Also, many definitions, just like mine, say that it is responsible for initializing properties and 
  methods. But I have not come across a use case for initializing methods within the constructor, and if we were to initialize a 
	method within the constructor, it would be unique for each instance and therefore not a method in the sense of what a method 
  means in OOP: a function on a class that is shared between all instances of that class.

	But, as my mentor <Link href="https://github.com/ericchase" linkText="Chase"  /> pointed out, <abbr title="Mozilla Developer Network">MDN</abbr> says, 
	`A property's value can be a function, in which case the property is known as a method.` He also pointed out that we developers 
  only write the constructor method, but behind the scenes, there is probably a lot more going on in the construction phase. So, 
  therefore, there probably is a use case for initializing methods within the constructor that I just don't know about due to my 
  lack of knowledge.

	I've also asked <Link href="https://www.youtube.com/@jmagrippis" linkText="Jonny Magrippis"  />, who is a great instructor, and 
  even he says he hasn't seen a legit use case for it. If you do know of a use case, please share!
</section>

